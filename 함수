203: 함수 목차

- 인수 작성
- 기초 함수 정의
- 함수에서 값 되돌리기
- 코드에서 재사용 가능한 부분을 어떻게 정의하는지 배울 것.

204: 함수 개요

- 함수는 배열, 조건, 변수 어디에서나 쓰임.
- 함수는 코드의 재사용 가능한 일부로서 언제든 사용할 수 있도록 이름을 붙여놓은 것.
- 코드의 중복을 줄이는 데 무척 유용하고 코드를 더 읽기 쉽고 이해하기 쉽게 만듬.
- 함수 사용법과 반환값을 배우고 나면 할 수 있게될 것!
- 그냥 재사용 가능한 코드 일부였던 함수를 만드는 것뿐만 아니라, 그걸 이용해서 어떤 입력을 거쳐 출력에 영향을 주는 것.
- 함수로 함수를 불러오고, 또 다른 함수를 불러오기도 가능함!
1. 함수 정의하기 2. 함수 실행하기 → 두가지 순서

```jsx
function funcName(){
//do something
}
//중괄호 안의 코드는 바로 실행되지 않는다. 이 함수를 실행할 때만 실행됨. 
```

- 함수의 중괄호 안에 코드를 넣었기 때문에 JS가 코드를 실행하지 않고 무시하는 것.
- 함수를 등록하거나 정의했다 해서 바로 실행되는 것은 아니다.

- 대부분의 경우 반드시 함수를 정의하고 그 후에야 함수를 불러냄.
- 하지만 정의하기 전에 불러낸다면? → 문제가 없긴 함.(자바스크립트의 불안정한 점! )
- 하지만 함수를 먼저 정의한 다음 사용하는 습관을 들일 것! (hoisting도 찾아보기)

```jsx
// 35번

function printHeart(){
    console.log("<3");
   
}
     printHeart();
```

205: 인수(Arguments)

- 함수에 입력하는 값.
- 메서드, 배열에서 이미 봤었다.→ 메서드와 함수의 참이점도 살펴볼 것! 모든 메서드는 곧 함수이다.
- 매개변수. 함수에 전달한 인수의 값이 매개변수에 저장됨.
- 인수를 전달하지 않으면 undefined가 출력됨. (Undefined를 기본값으로 갖는다.)
- 매개변수와 인수는 식별능력이 없고, 그냥 전달한 걸 그대로 저장함.

요약: 인수는 함수를 실행할 때 괄호 안에 전달하는 것이고, 매개변수는 일종의 플레이스 홀더로서 함수 정의할 때 용도에 따라 정해줄 수 있다. 

206: 인수가 여러개인 함수

- 함수를 정의할 때 하나 이상의 매개변수를 작성해줘야함.(매개변수 사이에 쉼표를 넣어 구분)→ 순서가 중요!
- 첫 매개변수가 첫 인수를 갖고, 두 번째 매개변수가 두 번째 인수를 가진다.

```jsx
function repeat(str, numTimes)[
		for (let i = 0; i < numTimes; i++{
				console.log("hi")
		}
}
repeat('ddd', 5) //문자열로는 아무거나 넣었음. 
//hi가 5번 출력 됨.
```

```jsx
function repeat(str, numTimes)[
		let result ='';
		for (let i = 0; i < numTimes; i++{
				rresult += str;
		}
		console.log(result);
}
//처음에는 결과가 없지만 특정 횟수만큼 반복되면서 매개변수인 str자리에 
//달러 기호가 계속 합쳐지는 결과가 나올 것.
```

- 숫자나 문자열 같은 다른 타입도 인수가 되도록 함수를 정의할 수 있다.
- 이경우 순서가 바뀌면 루프가 실행되지 않으니 결과값이 생성되지 않았고, 출력할 결과값이 없으니 아무것도 보이지 않음!
- 인수를 안 넣어도 됨. (인수가 코드에서 이용되어 오류를 일으키지만 않는다면 JavaScript는 상관하지 않음.)

1. 함수 정의 
- **`isSnakeEyes`**라는 함수는 **`num1`**과 **`num2`**라는 두 개의 매개변수를 가집니다. 이 함수는 주어진 두 개의 숫자가 모두 1인 경우 "Snake Eyes!"를 출력하고, 그렇지 않은 경우 "Not Snake Eyes!"를 출력합니다.

```jsx
// define isSnakeEyes below:
function isSnakeEyes(num1, num2) {
if (num1 === 1 && num2 === 1) {
console.log("Snake Eyes!");
} else {
console.log("Not Snake Eyes!")
}
}

let dice = Math.floor(Math.random() * 6) + 1;
isSnakeEyes(dice, dice);
```

1. 함수 호출
- **`Math.random()`** 함수와 수학 연산을 사용하여 1부터 6 사이의 무작위 정수를 생성하여 **`dice`** 변수에 저장합니다.
- **`isSnakeEyes(dice, dice)`**를 호출하여 **`dice`** 변수의 값을 **`isSnakeEyes`** 함수에 전달합니다. 이 때, 두 개의 매개변수에 같은 값을 전달하고 있습니다.
- **`isSnakeEyes`** 함수 내부에서는 전달된 두 개의 숫자를 비교하여 "Snake Eyes!" 또는 "Not Snake Eyes!"를 콘솔에 출력합니다.

- 위 코드에서 정수인 난수 만드는 법과 함수 호출 로직 :
1. Math.random() 함수를 사용하여 0 이상 1 미만의 임의의 부동 소수점 숫자를 생성합니다.
2. 이 숫자에 6을 곱하고 Math.floor() 함수를 사용하여 소수점 이하를 버림하여 0 이상 5 이하의 정수를 얻습니다.
3. 그런 다음 1을 더하여 1 이상 6 이하의 정수를 얻습니다. 이 정수는 주사위의 결과를 나타냅니다.
4. isSnakeEyes 함수에 두 개의 dice 변수를 전달합니다. 
5. isSnakeEyes 함수는 두 개의 주사위 결과를 비교하여 "뱀의 눈"이 나왔는지 확인합니다. "뱀의 눈"은 주사위 두 개의 결과가 모두 1인 경우를 말합니다.
