import React, { useEffect, useState } from "react";
import { styled } from "styled-components";
import { useNavigate } from "react-router-dom";
import useInput from "../../hooks/useInput";
import { useMutation } from "react-query";
import { addUsers, mobileCheck, mobileDoubleCheck } from "../../api/user";
import { nicknameCheck } from "../../api/profile";
import { emailCheck, emailDoubleCheck } from "../../api/user";
import { ReactComponent as EyeSVG } from "../../assets/images/login_signup_profile/icon_visibility.svg";
import { ReactComponent as ClosedEyeSVG } from "../../assets/images/login_signup_profile/icon_visibility_non.svg";
import { toast } from "react-hot-toast";

const BasicSignUp: React.FC = () => {
  const navigate = useNavigate();

  const [email, onChangeEmailHandler, resetEmail] = useInput("");
  const [code, onChangenumberHandler, resetNumber] = useInput("");

  const [to, onChangeMobileHandler, resetMobile] = useInput("");
  const [smsConfirmNum, onChangeMobileCodeHandler, resetMobileCode] = useInput("");

  const [password, onChangePasswordHandler, resetPassword] = useInput("");
  const [passwordCheck, onChangePasswordCheckHandler, resetPasswordCheck] = useInput("");
  const [nickname, onChangeNicknameHandler, resetNickname] = useInput("");

  const [isEmailVerified, setIsEmailVerified] = useState(false);
  const [isMobileVerified, setIsMobileVerified] = useState(false);
  const [isNicknameVerified, setIsNicknameVerified] = useState(false);

  const [isEmailFocused, setIsEmailFocused] = useState(false);
  const [isNumberFocused, setIsNumberFocused] = useState(false);

  const [isMobileFocused, setIsMobileFocused] = useState(false);
  const [isMobileNumberFocused, setIsMobileNumberFocused] = useState(false);

  const [isPasswordFocused, setIsPasswordFocused] = useState(false);
  const [isPasswordCheckFocused, setIsPasswordCheckFocused] = useState(false);

  const [isNicknameFocused, setIsNicknameFocused] = useState(false);

  const [showCodeInput, setShowCodeInput] = useState(false);
  const [showMobileInput, setShowMobileInput] = useState(false);

  const [isEmailButtonDisabled, setIsEmailButtonDisabled] = useState(false);
  const [isMobileButtonDisabled, setIsMobileButtonDisabled] = useState(false);

  const [emailVerificationTimer, setEmailVerificationTimer] = useState(0);
  const [mobileVerificationTimer, setMobileVerificationTimer] = useState(0);

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? "0" : ""}${remainingSeconds}`;
  };

  const [emailButtonContent, setEmailButtonContent] = useState("메일인증");
  const [mobileButtonContent, setMobileButtonContent] = useState("번호인증");

  const [showPassword, setShowPassword] = useState(false);
  const [showPasswordCheck, setShowPasswordCheck] = useState(false);

  const togglePasswordVisibility_1 = () => {
    setShowPassword((prevShowPassword) => !prevShowPassword);
  };

  const togglePasswordVisibility_2 = () => {
    setShowPasswordCheck((prevShowPasswordCheck) => !prevShowPasswordCheck);
  };

  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (emailVerificationTimer > 0) {
      interval = setInterval(() => {
        setEmailVerificationTimer((prevTimer) => prevTimer - 1);
      }, 1000);
    } else {
      clearInterval(interval);
    }

    return () => {
      clearInterval(interval);
    };
  }, [emailVerificationTimer]);

  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (mobileVerificationTimer > 0) {
      interval = setInterval(() => {
        setMobileVerificationTimer((prevTimer) => prevTimer - 1);
      }, 1000);
    } else {
      clearInterval(interval);
    }

    return () => {
      clearInterval(interval);
    };
  }, [mobileVerificationTimer]);

  const addNewUserMutation = useMutation(addUsers, {
    onSuccess: () => {
      toast.success("회원가입 되었습니다!", { position: "top-center" });
      navigate("/login");
    },

    onError: (error) => {
      if (error.response || error.response.data) {
        toast.error(`${error.response.data}`, { position: "top-center" });
      } else {
        toast.error("서버 에러가 발생했습니다.", { position: "top-center" });
      }
    },
  });

  const onSignUpClickHandler = () => {
    if (!isEmailVerified) {
      toast.error("이메일 인증을 먼저 진행해 주세요.", {
        position: "top-center",
      });
      return;
    }
    if (!isMobileVerified) {
      toast.error("핸드폰 인증을 먼저 진행해 주세요.", {
        position: "top-center",
      });
      return;
    }
    if (password !== passwordCheck) {
      toast.error("비밀번호를 다시 확인해주세요.", { position: "top-center" });
      return;
    }
    if (!passwordRegex.test(password)) {
      toast.error("비밀번호의 필수 요소를 확인해주세요.", {
        position: "top-center",
      });
      return;
    }
    if (!isNicknameVerified) {
      toast.error("닉네임 인증을 먼저 진행해 주세요.", {
        position: "top-center",
      });
      return;
    }

    const newUser = {
      email: email,
      password: password,
      nickname: nickname,
      phoneNumber: to,
    };
    addNewUserMutation.mutate(newUser);
  };

  const EmailhandleCheckButton = async () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      toast.error("올바른 이메일 형식이 아닙니다.", { position: "top-center" });
      return;
    }
    setIsEmailButtonDisabled(true);
    setEmailButtonContent("발송 중");
    setEmailVerificationTimer(300);

    try {
      const data = await emailCheck(email);
      toast.success(`${data.data.message}`, { position: "top-center" });
      setShowCodeInput(true);
    } catch (error) {
      toast.error("이미 가입하신 이메일입니다.", { position: "top-center" });
    } finally {
      setIsEmailButtonDisabled(false);
      setEmailButtonContent("재전송");
    }
  };

  const DoubleCheckhandleButton = async () => {
    const data = await emailDoubleCheck(email, code);

    if (data.data.data === true) {
      setIsEmailVerified(true);
      setIsEmailButtonDisabled(true);
      toast.success(
        "사용할 수 있는 이메일입니다! 회원가입 절차를 계속 진행해주세요.",
        { position: "top-center" }
      );
      setShowCodeInput(false);
      setEmailButtonContent("인증완료");
    } else if (data.data.error || data.data.data === false) {
      setIsEmailVerified(false);
      setIsEmailButtonDisabled(false);
      toast.error("이메일 인증에 실패했습니다. 처음부터 다시 시도해주세요.", {
        position: "top-center",
      });
      resetEmail();
      resetNumber();
    }
  };

  const MobilehandleCheckButton = async () => {
    const toRegex = /^(010|011)[0-9]{8}$/;

    if (!toRegex.test(to)) {
      toast.error("11자리 숫자만 입력해주세요.", { position: "top-center" });
      resetMobile();
      return;
    }
    setMobileButtonContent("발송 중");
    setMobileVerificationTimer(300);
    try {
      const data = await mobileCheck(to);
      setMobileButtonContent("재전송");
      setIsMobileButtonDisabled(false);
      setShowMobileInput(true);
      toast.success("모바일 인증 번호를 발송했습니다.", {
        position: "top-center",
      });
    } catch (error) {
      setMobileButtonContent("재전송");
      toast.error("이미 등록된 전화번호입니다.", { position: "top-center" });
    }
  };

  const MobileDoubleCheckhandleButton = async () => {
    const data = await mobileDoubleCheck(smsConfirmNum, to);

    if (data.data.data === true) {
      setIsMobileVerified(true);
      toast.success(
        "유효한 핸드폰 번호입니다. 회원가입 절차를 계속 진행해주세요.",
        { position: "top-center" }
      );
      setShowMobileInput(false);
      setIsMobileButtonDisabled(true);
      setMobileButtonContent("인증완료");
    } else if (data.data.error || data.data.data === false) {
      setIsMobileVerified(false);
      setIsMobileButtonDisabled(false);
      toast.error("모바일 인증에 실패했습니다. 다시 시도해주세요.", {
        position: "top-center",
      });
      setMobileButtonContent("재전송");
      resetMobile();
      resetMobileCode();
    }
  };

  const handleCheckButton = async () => {
    const response = await nicknameCheck(nickname);

    if (response.data.message) {
      toast.success(`${response.data.message}`, { position: "top-center" });
      setIsNicknameVerified(true);
    } else {
      toast.error(`${response.data.error}`, { position: "top-center" });
      setIsNicknameVerified(false);
    }
  };

  return (
    <InnerContainer>
      <Stbox>
        <Stnickname>
          <Stname>
            <Stinput4
              type="text"
              placeholder="이메일 계정"
              value={email}
              onChange={onChangeEmailHandler}
              onFocus={() => setIsEmailFocused(true)}
              onBlur={() => setIsEmailFocused(false)}
              $isFocused={isEmailFocused}
              $hasValue={email.length > 0}
              disabled={isEmailVerified}
            />
            <Stbutton1
              onClick={EmailhandleCheckButton}
              disabled={isEmailButtonDisabled}
            >
              {emailButtonContent}
            </Stbutton1>
          </Stname>
        </Stnickname>
        {showCodeInput && (
          <Stnickname>
            <Stname>
              <Stinput4
                type="text"
                value={code}
                placeholder={`인증번호 8자리 (${formatTime(
                  emailVerificationTimer
                )})`}
                onChange={onChangenumberHandler}
                onFocus={() => setIsNumberFocused(true)}
                onBlur={() => setIsNumberFocused(false)}
                $isFocused={isNumberFocused}
                $hasValue={code.length > 0}
              />
              <Stbutton1 onClick={DoubleCheckhandleButton}>인증</Stbutton1>
            </Stname>
          </Stnickname>
        )}

        <Stnickname>
          <Stname>
            <Stinput4
              type="text"
              placeholder="핸드폰 번호"
              value={to}
              onChange={onChangeMobileHandler}
              onFocus={() => setIsMobileFocused(true)}
              onBlur={() => setIsMobileFocused(false)}
              $isFocused={isMobileFocused}
              $hasValue={to.length > 0}
              disabled={isMobileVerified}
            />
            <Stbutton1
              onClick={MobilehandleCheckButton}
              disabled={isMobileButtonDisabled}
            >
              {mobileButtonContent}
            </Stbutton1>
          </Stname>
        </Stnickname>

        {showMobileInput && (
          <Stnickname>
            <Stname>
              <Stinput4
                type="text"
                value={smsConfirmNum}
                placeholder={`인증번호 5자리 (${formatTime(
                  mobileVerificationTimer
                )})`}
                onChange={onChangeMobileCodeHandler}
                onFocus={() => setIsMobileNumberFocused(true)}
                onBlur={() => setIsMobileNumberFocused(false)}
                $isFocused={isMobileNumberFocused}
                $hasValue={smsConfirmNum.length > 0}
              />
              <Stbutton1 onClick={MobileDoubleCheckhandleButton}>
                인증
              </Stbutton1>
            </Stname>
          </Stnickname>
        )}
        <Stinput2Container>
          <Stinput2
            type={showPassword ? "text" : "password"}
            placeholder="비밀번호 입력(8~15자 이내)"
            value={password}
            onChange={onChangePasswordHandler}
            onFocus={() => setIsPasswordFocused(true)}
            onBlur={() => setIsPasswordFocused(false)}
            $isFocused={isPasswordFocused}
            $hasValue={password.length > 0}
          />
          <PasswordToggle onClick={togglePasswordVisibility_1}>
            {showPassword ? <Eye /> : <ClosedEye />}
          </PasswordToggle>
        </Stinput2Container>
      </Stbox>
      <Stbox>
        <Stnumber>대문자, 소문자, 숫자, 특수문자 각 1개 이상 포함</Stnumber>

        <Stinput2Container>
